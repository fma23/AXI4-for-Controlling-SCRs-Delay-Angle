
#include <stdio.h>
#include <math.h>
#include "xparameters.h"
#include "xstatus.h"
#include "xil_printf.h"
#include "xuartps_hw.h"

#include "platform.h"
#include "xbasic_types.h"

#define BUFFER_SIZE 256
#define CyclesPerPeriod  2000000
#define ClockCycles      100000000



u8 SendBuffer[BUFFER_SIZE]; /* Buffer for Transmitting Data */
u8 RecvBuffer[BUFFER_SIZE]; /* Buffer for Receiving Data */

int ReceiveBuffer[2]; /* Buffer for Transmitting Data */

Xuint32 *baseaddr_p = (Xuint32 *)XPAR_SCRS_CONTROLLER_0_S00_AXI_BASEADDR;


void Wait(int num);
int sleep(unsigned int seconds);
int Calculate_RisingEdgeCounter(int *temp);
int Calculate_FallingEdgeCounter(int *temp);


int main(void)
{

u8 counter=0;
int temp=0;

int RisingEdgeCounter=0;
int FallingEdgeCounter=0;

 xil_printf("Enter a value between 0 and 90 degrees for phase delay: \n");
 xil_printf("%d \n",90);

 while(1)
 {

	 if(XUartPs_IsReceiveData(STDIN_BASEADDRESS))
	 {
		  counter++;

		  if(counter==1)
		  {
			ReceiveBuffer[0]=XUartPs_RecvByte(STDIN_BASEADDRESS);     //receive data from terra term
		  }
		  else
		  {
			ReceiveBuffer[1]=XUartPs_RecvByte(STDIN_BASEADDRESS);     //receive data from terra term

		    temp=(ReceiveBuffer[0]-48)*10;
		    temp=temp+(ReceiveBuffer[1]-48);

		    xil_printf("phase angle delay value entered is: %d \n",temp);

		    ReceiveBuffer[0]=0;
		    ReceiveBuffer[1]=0;
			counter=0;
			temp=0;
		  }

		 //compute rising edge counter
		  RisingEdgeCounter= Calculate_RisingEdgeCounter(&temp);

		 // compute falling edge counter
		  FallingEdgeCounter= Calculate_FallingEdgeCounter(&RisingEdgeCounter);

		//sleep(1);

		// Write multiplier inputs to register 0
	//    *(baseaddr_p+0) = 0xFFFF0000|ReceiveBuffer[0];
	//    *(baseaddr_p+0) = 0x0000FFFF|(ReceiveBuffer[1]<<16);

		// xil_printf("Wrote: 0x%08x \n\r", *(baseaddr_p+0));

		xil_printf("Enter a value between 0 and 90 degrees for phase delay: \n");
	 }
}


return 0;
}


int Calculate_RisingEdgeCounter(int *temp)
{
	float tempvalue=0;

	tempvalue=*temp+30;
	tempvalue=360/tempvalue;
	tempvalue=CyclesPerPeriod/tempvalue;
	(int)tempvalue=round(tempvalue);

}

int Calculate_FallingEdgeCounter(int *RisingEdgeCounter)
{

	int tempvalue=0;




}
